（1）自动化测试工具
https://blog.csdn.net/jlh912008548/article/details/72782241

CREATE TABLE `sys_user_log` (
  `log_id` varchar(32) NOT NULL COMMENT '日志表id，uuid',
  `user_id` varchar(32) DEFAULT NULL COMMENT '用户id,记录操作用户',
  `module_name` varchar(225) NOT NULL COMMENT '模块名称',
  `operate` varchar(225) NOT NULL COMMENT '操作名称',
  `time` datetime NOT NULL COMMENT '操作时间',
  `class_name` varchar(225) NOT NULL COMMENT '类名称',
  `method_name` varchar(225) NOT NULL COMMENT '方法名称',
  `params` longtext COMMENT '传入参数',
  `ip` varchar(225) NOT NULL COMMENT '操作ip',
  PRIMARY KEY (`log_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

（6）工具类
AppExpertareaUtil.java
AsyncUtil.java
CfgHistoryProcessUtil.java
Constants.java
ConvertUtil.java
DownloadUtil.java
ExcelUtil.java
FileUtils.java
GalaxyUtil.java
LIST.TXT
ListUtils.java
MailUtil.java
MongodbUtil.java
MyMultipartResolver.java
NumConstants.java
PathUtil.java
PoiUtil.java
read.bat
RowValueClassType.java
ShortMsgUtil.java
SolrUpdateUtil.java
SourceUnionInitUtil.java
StatInfoProcessUtil.java
SynonymsUtil.java
SysConfig.java
TimeUtils.java
UniomLabelInitUtil.java
UserPermissionUtil.java
UserSearchStatProcessUtil.java
Util.java
ValidatorUtil.java

（7）oracle的依赖包找不到
https://blog.csdn.net/u011134399/article/details/79034296

（8）fileupload插件调用upload.parseRequest(request)解析得到空值问题
https://blog.csdn.net/u013248535/article/details/55823364

(9)公司版本，这个版本不要用的太高，会出问题哦
<!-- 	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.12.RELEASE</version>
		<relativePath/>
	</parent> -->

（10）spring mvc和spring boot下文件上传方式的方法
上传文件开始的代码
    public static void uploadFile(HttpServletRequest request, String filePath, String fileName)
    {
        // TODO Auto-generated method stub
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            DiskFileItemFactory factory = new DiskFileItemFactory();
            ServletFileUpload upload = new ServletFileUpload(factory);
            List<FileItem> list = upload.parseRequest(request);
            for(FileItem item : list)
            {
                if(item.isFormField())
                {
                    String inputName = item.getFieldName();
                    String inputValue = item.getString();
                    LOGGER.info(inputName + "=" + inputValue);
                }
                else
                {
                    in = new BufferedInputStream(item.getInputStream());
                    out = new BufferedOutputStream(new FileOutputStream(filePath+fileName));
                    byte buffer[] = new byte[1024];
                    int len = 0;
                    while (-1 != (len = in.read(buffer, 0, buffer.length)))
                    {
                        out.write(buffer, 0, len);
                    }
                }
            }
        }
        catch (IllegalStateException e)
        {
            LOGGER.error(e.getMessage());
        }
        catch(Exception e) {
            LOGGER.error(e.getMessage());
        }finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
        
    }


    public static void uploadFile(HttpServletRequest request, String filePath, String fileName)
    {
        // TODO Auto-generated method stub
        BufferedInputStream in = null;
        BufferedOutputStream out = null;
        try {
            StandardMultipartHttpServletRequest req = (StandardMultipartHttpServletRequest) request;
            Iterator<String> iterator = req.getFileNames();
            while (iterator.hasNext()) {
                MultipartFile file = req.getFile(iterator.next());          
                in = new BufferedInputStream(file.getInputStream());
                out = new BufferedOutputStream(new FileOutputStream(filePath+fileName));
                byte buffer[] = new byte[1024];
                int len = 0;
                while (-1 != (len = in.read(buffer, 0, buffer.length)))
                {
                    out.write(buffer, 0, len);
                }
            }
        }
        catch (IllegalStateException e)
        {
            LOGGER.error(e.getMessage());
        }
        catch(Exception e) {
            LOGGER.error(e.getMessage());
        }finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
        
    }


  

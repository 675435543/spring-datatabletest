/*
 * 文 件 名:  ConvertUtil.java 
 * 描    述:  数据结构转换类
 */
import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.Collator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.UUID;
import java.util.function.Function;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.util.CollectionUtils;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.huawei.rdsearch.entity.AppData;
import com.huawei.rdsearch.index.IndexConfig;
import com.huawei.rdsearch.index.vo.QueryConditionVO;
import com.huawei.rdsearch.index.vo.QueryDocSimilarityItemVO;
import com.huawei.rdsearch.index.vo.QueryItemVO;
import com.huawei.rdsearch.index.vo.QueryResultsVO;
import com.huawei.rdsearch.index.vo.QuerySankeyItemVO;
import com.huawei.rdsearch.index.vo.QuerySankeyResultsVO;
import com.huawei.rdsearch.vo.CustomSankeyData;
import com.huawei.rdsearch.vo.CustomSankeyNode;
import com.huawei.rdsearch.vo.SankeyData;
import com.huawei.rdsearch.vo.SankeyLink;
import com.huawei.rdsearch.vo.SankeyNode;

/**
 * 此工具类方法用于对数据结构进行转换
 * 
 */
public final class ConvertUtil
{
    protected static final Logger LOG = Logger.getLogger(ConvertUtil.class);

    private ConvertUtil()
    {
    }

    /**
     * 查询到的app数据
     * 
     * @param queryResult
     *            搜索引擎返回的查询结果
     * @return apps
     */
    public static List<AppData> convertToAppData(final QueryResultsVO queryResult)
    {
        List<AppData> apps = new ArrayList<>();
        if (Objects.nonNull(queryResult) && !CollectionUtils.isEmpty(queryResult.getData()))
        {
            for (QueryItemVO vo : queryResult.getData())
            {
                AppData app = new AppData();
                app.setUrl(vo.getSrc());
                app.setType(vo.getFrom());
                app.setSearchid(vo.getId());
                app.setTitle(vo.getTitle());
                app.setAppurl(vo.getShareUrl());
                app.setKeyword(vo.getLabel());
                apps.add(app);
            }
        }
        return apps;
    }
    
    /**
     * 
     * @param queryResult vo
     * @return list
     */
    public static List<JSONObject> convertToAppCustom(final QueryResultsVO queryResult)
    {
        List<JSONObject> apps = new ArrayList<JSONObject>();
        if (Objects.nonNull(queryResult) && !CollectionUtils.isEmpty(queryResult.getData()))
        {
            for (QueryItemVO vo : queryResult.getData())
            {
                JSONObject json = new JSONObject();
                json.put("searchid", vo.getId());
                json.put("type", vo.getFromKey());
                json.put("keyword", vo.getLabel());
                json.put("name", vo.getTitle());
                json.put("title", vo.getTitle());
                json.put("businessNo", vo.getId());
                json.put("url", vo.getSrc());
                json.put("appurl", vo.getShareUrl());
                json.put("info", vo.getInfo());
                if (StringUtils.isNotBlank(vo.getSnapshot()))
                {
                    json.put("imgurl", vo.getSnapshot());
                }
                //自定义知识图谱模板id
                Map<String, String> extProps = vo.getExtProps();
                if (StringUtils.isNotBlank(extProps.get("group_sanky")))
                {
                    json.put("groupSanky", extProps.get("group_sanky"));
                }
                apps.add(json);
            }
        }
        return apps;
    }
    
    
    

    /**
     * @param queryResult QueryResultsVO
     * @return Map<String, Map<String, List<QueryItemVO>>>
     */
    public static Map<String, Map<String, List<QueryItemVO>>> convertToKnowledge(final QueryResultsVO queryResult)
    {
        // 按故障现象聚合
        Map<String, List<QueryItemVO>> items = Util.groupByOrdered(queryResult.getData(), QueryItemVO::getBody);
        // 相同故障现象的进一步按根因聚合
        Map<String, Map<String, List<QueryItemVO>>> rootCauseItems = new LinkedHashMap<>();
        items.entrySet().stream().forEach(
                k -> rootCauseItems.put(k.getKey(), Util.groupByOrdered(k.getValue(), QueryItemVO::getConfigSrc)));
        return rootCauseItems;
    }
    
    /**
     * @param queryResult QueryResultsVO
     * @return Map<String, Map<String, List<QueryItemVO>>>
     */
    public static Map<String, Map<String, List<QueryItemVO>>> convertToKnowledgeMap(final QueryResultsVO queryResult)
    {
        // 按故障现象聚合
        Map<String, List<QueryItemVO>> items = Util.groupByOrdered(queryResult.getData(), QueryItemVO::getDescription);
        // 相同故障现象的进一步按根因聚合
        Map<String, Map<String, List<QueryItemVO>>> rootCauseItems = new LinkedHashMap<>();
        items.entrySet().stream().forEach(
                k -> rootCauseItems.put(k.getKey(), Util.groupByOrdered(k.getValue(), QueryItemVO::getGroupType)));
        return rootCauseItems;
    }
    
    /**
     * @param queryResult QueryResultsVO
     * @return Map<String, Map<String, List<QueryItemVO>>>
     */
    public static Map<String, Map<String, List<QuerySankeyItemVO>>> convertToCustomKnowledgeMap(
            final QuerySankeyResultsVO queryResult)
    {
        // 按故障现象聚合
        Map<String, List<QuerySankeyItemVO>> customItems = Util.groupByOrdered(queryResult.getData(),
                QuerySankeyItemVO::getNode1);
        // 相同故障现象的进一步按根因聚合
        Map<String, Map<String, List<QuerySankeyItemVO>>> rootCauseItems = new LinkedHashMap<>();
        customItems.entrySet().stream().forEach(
                k -> rootCauseItems.put(k.getKey(), 
                        Util.groupByOrdered(k.getValue(), QuerySankeyItemVO::getNode2)));
        return rootCauseItems;
    }

    /**
     * 
     * convertToCustomSankeyData
     *
     * @param queryResult QuerySankeyResultsVO
     * @param configJson JSONObject
     *
     * @return CustomSankeyData
     */
    public static CustomSankeyData convertToCustomSankeyData(final QuerySankeyResultsVO queryResult,
            JSONObject configJson)
    {
        CustomSankeyData sankeyData = new CustomSankeyData();

        // nodetypes
        JSONArray sankeyNodesConfig = (JSONArray) configJson.get("sankeyNode");
        List<Map<String, String>> nodeTypes = new ArrayList<Map<String, String>>();
        for (int i = 0; i < sankeyNodesConfig.size(); i++)
        {
            Map<String, String> nodeType = new HashMap<String, String>();
            JSONObject node = (JSONObject) sankeyNodesConfig.get(i);
            String nodeName = node.getString("nodeName");
            String nodeData = node.getString("nodeData");
            nodeType.put(nodeData, nodeName);
            nodeTypes.add(nodeType);
        }
        sankeyData.setNodeTypes(nodeTypes);

        // nodes config
        String relcfg = SysConfig.getIndexConfig("custom.nodes");
        String urlcfg = SysConfig.getIndexConfig("custom.url");
        String[] nodesRel = relcfg.split(",");
        String[] nodesUrl = urlcfg.split(",");

        // node and link
        List<CustomSankeyNode> nodes = new ArrayList<CustomSankeyNode>();
        List<SankeyLink> links = new ArrayList<SankeyLink>();

        // 从第一个节点开始处理 node1~node7;nodedep:0~6
        setCustomSankeyNodeAndLink(0, queryResult.getData(), sankeyNodesConfig, nodesRel, nodesUrl, nodes, links, null);

        sankeyData.setCustomNodes(nodes);
        sankeyData.setLinks(links);

        return sankeyData;
    }

    private static void setCustomSankeyNodeAndLink(int nodedep, List<QuerySankeyItemVO> values,
            JSONArray sankeyNodesConfig, String[] nodesRel, String[] nodesUrl, List<CustomSankeyNode> nodes,
            List<SankeyLink> links, CustomSankeyNode pnode)
    {
        Function<QuerySankeyItemVO, String> nodegp = getNodeGroupFunction(nodedep);
        // 层级判断
        if (nodedep >= sankeyNodesConfig.size() || nodegp == null)
        {
            return;
        }

        // node group
        Map<String, List<QuerySankeyItemVO>> nodeItemsMap = Util.groupByOrdered(values, nodegp);
        // node sort
        Comparator<Object> instance = Collator.getInstance(java.util.Locale.CHINA);
        List<Entry<String, List<QuerySankeyItemVO>>> nodeItemsLs = nodeItemsMap.entrySet().stream()
                .sorted(Comparator.comparing(Entry::getKey, instance)).collect(Collectors.toList());
        for (Entry<String, List<QuerySankeyItemVO>> entry : nodeItemsLs)
        {
            QuerySankeyItemVO dataVo = entry.getValue().get(0);
            CustomSankeyNode node = getCustomSankeyNode(sankeyNodesConfig, nodedep, dataVo, nodesRel, nodesUrl);
            if (node != null)
            {
                nodes.add(node);
            }

            SankeyLink faultLink = getCustomSankeyLink(pnode, node, entry.getValue().size(), nodeItemsLs.size());
            if (pnode != null)
            {
                links.add(faultLink);
            }

            setCustomSankeyNodeAndLink(nodedep + 1, entry.getValue(), sankeyNodesConfig, nodesRel, nodesUrl, nodes,
                    links, node);
        }
    }

    /**
     * getNodeGroupFunction
     *
     * @param nodedep int
     *
     * @return Function<QuerySankeyItemVO,String>
     */
    private static Function<QuerySankeyItemVO, String> getNodeGroupFunction(int nodedep)
    {
        // 定义分组节点
        Function<QuerySankeyItemVO, String> nodegp = null;
        if (nodedep == 0)
        {
            nodegp = e -> e.getNode1();
        }
        else if (nodedep == NumConstants.NUM_1)
        {
            nodegp = e -> e.getNode2();
        }
        else if (nodedep == NumConstants.NUM_2)
        {
            nodegp = e -> e.getNode3();
        }
        else if (nodedep == NumConstants.NUM_3)
        {
            nodegp = e -> e.getNode4();
        }
        else if (nodedep == NumConstants.NUM_4)
        {
            nodegp = e -> e.getNode5();
        }
        else if (nodedep == NumConstants.NUM_5)
        {
            nodegp = e -> e.getNode6();
        }
        else if (nodedep == NumConstants.NUM_6)
        {
            nodegp = e -> e.getNode7();
        }
        return nodegp;
    }

    private static CustomSankeyNode getCustomSankeyNode(JSONArray sankeyNodesConfig, int idx, QuerySankeyItemVO dataVo,
            String[] nodesRel, String[] nodesUrl)
    {
        if (sankeyNodesConfig == null || dataVo == null || nodesRel == null || nodesUrl == null
                || idx >= sankeyNodesConfig.size())
        {
            return null;
        }

        JSONObject sankeyNode = (JSONObject) sankeyNodesConfig.get(idx);
        String dataType = StringUtils.trim(sankeyNode.getString("nodeData"));
        String urlType = StringUtils.trim(sankeyNode.getString("nodeUrl"));

        Map<String, Object> valueMap = getQueryItemValue(dataVo);
        String textKey = nodesRel[idx];
        String urlKey = nodesUrl[idx];

        String textValue = StringUtils.defaultString((String) valueMap.get(textKey));
        String urlValue = (String) valueMap.get(urlKey);

        if (StringUtils.isBlank(textValue))
        {
            return null;
        }

        CustomSankeyNode node = new CustomSankeyNode();
        if (idx == 0)
        {
            node.setId(textValue);
        }
        else
        {
            node.setId(textValue + getUUIDSub());
        }
        node.setName(textValue);
        node.setText(textValue);

//        if ("url".equals(urlType))
//        {
//            setUrl(node, urlValue);
//        }
        if ("rsearch_search".equals(urlType))
        {
            node.setUrl("rsearch_search");
        }
        else if (StringUtils.isNotBlank(urlType))
        {
            setUrl(node, urlValue);
        }
        else
        {
            node.setUrl("");
        }

        node.setType(dataType);
        node.setSnap(dataVo.getId());
        node.setNodeType(nodesRel[idx] + "_s");

        return node;
    }

    /**
     * 
     * getCustomSankeyLink
     *
     * @param sourceNode 父节点
     * @param targetNode 当前节点
     * @param endNodeSize 末端节点数
     * @param brotherNodeSize 兄弟节点数
     *
     * @return SankeyLink
     */
    private static SankeyLink getCustomSankeyLink(CustomSankeyNode sourceNode, CustomSankeyNode targetNode,
            int endNodeSize, int brotherNodeSize)
    {
        if (sourceNode == null || targetNode == null)
        {
            return null;
        }

        SankeyLink faultLink = new SankeyLink();
        faultLink.setSource(sourceNode.getId());
        faultLink.setTarget(targetNode.getId());
        faultLink.setLinkSize(endNodeSize);
//        faultLink.setLinkSize(endNodeSize * 2 - 1);
        // endNodeSize * 2 - 1 + (brotherNodeSize - 1) / brotherNodeSize
//        BigDecimal linkSize = (new BigDecimal(endNodeSize * 2 - 1)).add(new BigDecimal(brotherNodeSize - 1)
//                .divide(new BigDecimal(brotherNodeSize), NumConstants.NUM_3, RoundingMode.HALF_DOWN));
//        faultLink.setLinkSize(linkSize.floatValue());

        return faultLink;
    }

    /**
     * @param convertMap Map<String, Map<String, List<QueryItemVO>>>
     * @return SankeyData
     */
    public static SankeyData convertToKnowledgeVo(final Map<String, Map<String, List<QueryItemVO>>> convertMap)
    {
        
        SankeyData sankeyData = new SankeyData();
        Map<String, String> nodeType1 = new HashMap<String, String>();
        nodeType1.put("fault", "故障现象");
        Map<String, String> nodeType2 = new HashMap<String, String>();
        nodeType2.put("reason", "根因");
        Map<String, String> nodeType3 = new HashMap<String, String>();
        nodeType3.put("solu", "解决方案");
        Map<String, String> nodeType4 = new HashMap<String, String>();
        nodeType4.put("link", "问题单链接");
        Map<String, String> nodeType5 = new HashMap<String, String>();
        nodeType5.put("more", "更多");
        List<Map<String, String>> nodeTypes = new ArrayList<Map<String, String>>();
        nodeTypes.add(nodeType1);
        nodeTypes.add(nodeType2);
        nodeTypes.add(nodeType3);
        nodeTypes.add(nodeType4);
        nodeTypes.add(nodeType5);
        sankeyData.setNodeTypes(nodeTypes);
        
        List<SankeyNode> nodes = new ArrayList<SankeyNode>();
        SankeyNode faultNode = null;
        List<SankeyNode> reasonNodes = new ArrayList<SankeyNode>();
        List<SankeyNode> soluNodes = new ArrayList<SankeyNode>();
        List<SankeyNode> linkNodes = new ArrayList<SankeyNode>();
        List<SankeyNode> moreNodes = new ArrayList<SankeyNode>();
        for (Entry<String, Map<String, List<QueryItemVO>>> entryMap : convertMap.entrySet())
        {
            faultNode = new SankeyNode();
            faultNode.setId(entryMap.getKey()  + getUUIDSub());
            faultNode.setName(entryMap.getKey());
            faultNode.setText("");
            faultNode.setType("fault");
            for (Entry<String, List<QueryItemVO>> entryLst : entryMap.getValue().entrySet())
            {
                SankeyNode reasonNode = new SankeyNode();
                QueryItemVO queryItemVO = entryLst.getValue().get(0);

                reasonNode.setId(entryLst.getKey() + getUUIDSub());
                reasonNode.setName(entryLst.getKey());
                reasonNode.setText(queryItemVO.getInfo());
                reasonNode.setType("reason");
                reasonNodes.add(reasonNode);
                
                SankeyNode soluNode = new SankeyNode();
                String solu = queryItemVO.getSolution();
                soluNode.setId(solu + getUUIDSub());
                soluNode.setName(solu);
                soluNode.setText(queryItemVO.getContent());
                soluNode.setType("solu");
                soluNodes.add(soluNode);
                
                
                SankeyNode linkNode = new SankeyNode();
                linkNode.setId(queryItemVO.getPreId() + getUUIDSub());
                linkNode.setName(queryItemVO.getTitle());
                linkNode.setText(queryItemVO.getSrc());
                linkNode.setType("link");
                linkNodes.add(linkNode);
                
                SankeyNode moreNode = new SankeyNode();
                moreNode.setId("更多" + getUUIDSub());
                moreNode.setName("更多");
                moreNode.setText(queryItemVO.getGroupType());
                moreNode.setType("more");
                moreNodes.add(moreNode);
               
            }
        }
        
        nodes.add(faultNode);
        nodes.addAll(reasonNodes);
        nodes.addAll(soluNodes);
        nodes.addAll(linkNodes);
        nodes.addAll(moreNodes);
        sankeyData.setNodes(nodes);
        
        List<SankeyLink> links = new ArrayList<SankeyLink>();
        for (int i = 0; i < reasonNodes.size(); i++)
        {
            SankeyLink faultReasonLink = new SankeyLink();
            faultReasonLink.setSource(faultNode.getId());
            faultReasonLink.setTarget(reasonNodes.get(i).getId());
            links.add(faultReasonLink);
            
            SankeyLink reasonSoluLink = new SankeyLink();
            reasonSoluLink.setSource(reasonNodes.get(i).getId());
            reasonSoluLink.setTarget(soluNodes.get(i).getId());
            links.add(reasonSoluLink);
            
            SankeyLink soluLinkLink = new SankeyLink();
            soluLinkLink.setSource(soluNodes.get(i).getId());
            soluLinkLink.setTarget(linkNodes.get(i).getId());
            links.add(soluLinkLink);
            
            SankeyLink linkMoreLink = new SankeyLink();
            linkMoreLink.setSource(linkNodes.get(i).getId());
            linkMoreLink.setTarget(moreNodes.get(i).getId());
            links.add(linkMoreLink);
        }
        sankeyData.setLinks(links);
        return sankeyData;
    }
    
    
    /**
     * @param convertMap Map<String, Map<String, List<QueryItemVO>>>
     * @param appType String
     * @param multiNodes 是否有二级合并
     * @return SankeyData
     */
    public static SankeyData convertToKnowledgeVos(final Map<String, Map<String, List<QueryItemVO>>> convertMap,
            String appType, String multiNodes)
    {
        SankeyData sankeyData = new SankeyData();
        String nodesConfig = SysConfig.getIndexConfig(appType + ".nodeType");
        String[] allNodes = nodesConfig.split(",");
        List<Map<String, String>> nodeTypes = new ArrayList<Map<String, String>>();
        for (int i = 0; i < allNodes.length; i++)
        {
            String[] node = allNodes[i].split(":");
            Map<String, String> nodeType = new HashMap<String, String>();
            nodeType.put(node[0], node[1]);
            nodeTypes.add(nodeType);
        }
        sankeyData.setNodeTypes(nodeTypes);
        String rel = SysConfig.getIndexConfig(appType + ".nodes");
        String[] nodesRel = rel.split(";");
        SankeyNode faultNode = null;
        List<SankeyNode> nodes = new ArrayList<SankeyNode>();
        List<List<SankeyNode>> groupNodes = new ArrayList<List<SankeyNode>>();
        for (Entry<String, Map<String, List<QueryItemVO>>> entryMap : convertMap.entrySet())
        {
            String[] chars = nodesRel[0].split(",");
            faultNode = new SankeyNode();
            faultNode.setId(entryMap.getKey());
            faultNode.setName(entryMap.getKey());
            faultNode.setText(chars[2]);
            faultNode.setType(chars[NumConstants.NUM_3]);
            for (Entry<String, List<QueryItemVO>> entryLst : entryMap.getValue().entrySet())
            {
                List<QueryItemVO> values = entryLst.getValue();
                for (QueryItemVO queryItemVO : values)
                {
                    List<SankeyNode> oneSankey = new ArrayList<SankeyNode>();
                    for (int i = 1; i < nodesRel.length; i++)
                    {
                        SankeyNode sankyNode = buildOneNode(nodesRel, queryItemVO, i);
                        oneSankey.add(sankyNode);
                    }
                    groupNodes.add(oneSankey);
                    if (StringUtils.isBlank(multiNodes))
                    {
                        break;
                    }
                }
            }
        }
        nodes.add(faultNode);
        buidlLinks(sankeyData, nodesRel, faultNode, nodes, groupNodes);
        return sankeyData;
    }
    
    /**
     * @param convertMap Map<String, Map<String, List<QueryItemVO>>>
     * @param configJson 自定义知识图谱模板配置信息
     * @param multiNodes 是否有二级合并
     * @return SankeyData
     */
    public static CustomSankeyData convertToCustomKnowledgeVos(
            final Map<String, Map<String, List<QuerySankeyItemVO>>> convertMap, JSONObject configJson,
            String multiNodes)
    {
        CustomSankeyData sankeyData = new CustomSankeyData();
        JSONArray sankeyNodes = (JSONArray) configJson.get("sankeyNode");
        List<Map<String, String>> nodeTypes = new ArrayList<Map<String, String>>();
        for (int i = 0; i < sankeyNodes.size(); i++)
        {
            Map<String, String> nodeType = new HashMap<String, String>();
            JSONObject node = (JSONObject) sankeyNodes.get(i);
            String nodeName = node.getString("nodeName");
            String nodeData = node.getString("nodeData");
            //String nodeUrl = node.getString("nodeUrl");
            nodeType.put(nodeData, nodeName);
            nodeTypes.add(nodeType);
        }
        sankeyData.setNodeTypes(nodeTypes);
        String rel = SysConfig.getIndexConfig("custom.nodes");
        String url = SysConfig.getIndexConfig("custom.url");
        String[] nodesRel = rel.split(",");
        String[] nodesUrl = url.split(",");
        CustomSankeyNode faultNode = null;
        List<CustomSankeyNode> nodes = new ArrayList<CustomSankeyNode>();
        List<List<CustomSankeyNode>> groupNodes = new ArrayList<List<CustomSankeyNode>>();
        for (Entry<String, Map<String, List<QuerySankeyItemVO>>> entryMap : convertMap.entrySet())
        {
            JSONObject firstNode = (JSONObject) sankeyNodes.get(0);
            faultNode = new CustomSankeyNode();
            faultNode.setId(entryMap.getKey());
            faultNode.setName(entryMap.getKey());
            faultNode.setText(entryMap.getKey());
            faultNode.setType(firstNode.getString("nodeData"));
            faultNode.setUrl("");
            faultNode.setNodeType("node1_s");
            for (Entry<String, List<QuerySankeyItemVO>> entryLst : entryMap.getValue().entrySet())
            {
                List<QuerySankeyItemVO> values = entryLst.getValue();
                for (QuerySankeyItemVO queryItemVO : values)
                {
                    List<CustomSankeyNode> oneSankey = new ArrayList<CustomSankeyNode>();
                    for (int i = 1; i < sankeyNodes.size(); i++)
                    {
                        CustomSankeyNode sankyNode = buildOneCustomNode(nodesRel, nodesUrl,
                                (JSONObject) sankeyNodes.get(i), queryItemVO, i);
                        oneSankey.add(sankyNode);
                    }
                    groupNodes.add(oneSankey);
                    if (StringUtils.isBlank(multiNodes))
                    {
                        break;
                    }
                }
            }
        }
        nodes.add(faultNode);
        buidCustomlLinks(sankeyData, nodesRel, faultNode, nodes, groupNodes);
        return sankeyData;
    }

    private static void buidlLinks(SankeyData sankeyData, String[] nodesRel, SankeyNode faultNode,
            List<SankeyNode> nodes, List<List<SankeyNode>> groupNodes)
    {
        Map<String, String> idMap = new HashMap<String, String>();
        List<SankeyLink> links = new ArrayList<SankeyLink>();
        
        for (List<SankeyNode> sankeyList : groupNodes)
        {
            boolean flag = false;
            if (!idMap.containsKey(sankeyList.get(0).getName()))
            {
                SankeyLink faultLink = new SankeyLink();
                faultLink.setSource(faultNode.getId());
                faultLink.setTarget(sankeyList.get(0).getId());
                links.add(faultLink);
            }
            for (int j = 0; j < nodesRel.length - 1; j++)
            {
                if ((j + 1) == sankeyList.size())
                {
                    break;
                }
                if (idMap.containsKey(sankeyList.get(j).getName()))
                {
                    SankeyLink reasonSoluLink = new SankeyLink();
                    reasonSoluLink.setSource(idMap.get(sankeyList.get(j).getName()));
                    reasonSoluLink.setTarget(sankeyList.get(j + 1).getId());
                    links.add(reasonSoluLink);
                    flag = true;
                }
                else
                {
                    SankeyLink reasonSoluLink = new SankeyLink();
                    reasonSoluLink.setSource(sankeyList.get(j).getId());
                    reasonSoluLink.setTarget(sankeyList.get(j + 1).getId());
                    links.add(reasonSoluLink);
                    if (j == 0)
                    {
                        idMap.put(sankeyList.get(0).getName(), sankeyList.get(0).getId());
                    }
                }
            }
            if (flag)
            {
                sankeyList.remove(0);
            }
            nodes.addAll(sankeyList);
        }
        sankeyData.setLinks(links);
        sankeyData.setNodes(nodes);
    }
    
    private static void buidCustomlLinks(CustomSankeyData sankeyData, String[] nodesRel, SankeyNode faultNode,
            List<CustomSankeyNode> nodes, List<List<CustomSankeyNode>> groupNodes)
    {
        Map<String, String> idMap = new HashMap<String, String>();
        List<SankeyLink> links = new ArrayList<SankeyLink>();
        
        for (List<CustomSankeyNode> customSankeyList : groupNodes)
        {
            boolean flag = false;
            if (!idMap.containsKey(customSankeyList.get(0).getName()))
            {
                SankeyLink faultLink = new SankeyLink();
                faultLink.setSource(faultNode.getId());
                faultLink.setTarget(customSankeyList.get(0).getId());
                links.add(faultLink);
            }
            for (int j = 0; j < nodesRel.length - 1; j++)
            {
                if ((j + 1) == customSankeyList.size())
                {
                    break;
                }
                String idKey = customSankeyList.get(j).getName() + "_" + nodesRel[j];
                if (idMap.containsKey(idKey))
                {
                    SankeyLink customRreasonLink = new SankeyLink();
                    customRreasonLink.setSource(idMap.get(idKey));
                    customRreasonLink.setTarget(customSankeyList.get(j + 1).getId());
                    links.add(customRreasonLink);
                    flag = true;
                }
                else
                {
                    SankeyLink reasonSoluLink = new SankeyLink();
                    reasonSoluLink.setSource(customSankeyList.get(j).getId());
                    reasonSoluLink.setTarget(customSankeyList.get(j + 1).getId());
                    links.add(reasonSoluLink);
                    if (j == 0)
                    {
                        idMap.put(idKey, customSankeyList.get(0).getId());
                    }
                }
            }
            if (flag)
            {
                customSankeyList.remove(0);
            }
            nodes.addAll(customSankeyList);
        }
        sankeyData.setLinks(links);
        sankeyData.setCustomNodes(nodes);
        sankeyData.setNodes(null);
    }

    private static SankeyNode buildOneNode(String[] nodesRel, QueryItemVO queryItemVO, int i)
    {
        SankeyNode sankyNode = new SankeyNode();
        Map<String, Object> valueMap = getQueryItemValue(queryItemVO);
        String[] prop = nodesRel[i].split(",");
        if (valueMap.containsKey(prop[0]))
        {
            sankyNode.setId((String) valueMap.get(prop[0]) + getUUIDSub());
        }
        else
        {
            sankyNode.setId(prop[0] + getUUIDSub());
        }
        if (valueMap.containsKey(prop[0]))
        {
            sankyNode.setName((String) valueMap.get(prop[1]));
        }
        else
        {
            sankyNode.setName(prop[1]);
        }
        if (valueMap.containsKey(prop[2]))
        {
            sankyNode.setText((String) valueMap.get(prop[2]));
        }
        else
        {
            sankyNode.setText(prop[2]);
        }
        sankyNode.setType(prop[NumConstants.NUM_3]);
        sankyNode.setSnap(queryItemVO.getId());
        return sankyNode;
    }

    private static CustomSankeyNode buildOneCustomNode(String[] nodesRel, String[] nodesUrl,
            JSONObject sankeyNode, QuerySankeyItemVO queryItemVO, int i)
    {
        String type = StringUtils.trim(sankeyNode.getString("nodeData"));
        String url = StringUtils.trim(sankeyNode.getString("nodeUrl"));
        CustomSankeyNode sankyNode = new CustomSankeyNode();
        Map<String, Object> valueMap = getQueryItemValue(queryItemVO);
        String textKey = nodesRel[i];
        String urlKey = nodesUrl[i];

        String textValue = StringUtils.defaultString((String) valueMap.get(textKey));
        String urlValue = (String) valueMap.get(urlKey);

        sankyNode.setId(textValue + getUUIDSub());
        sankyNode.setName(textValue);
        sankyNode.setText(textValue);

        if ("url".equals(url))
        {
            setUrl(sankyNode, urlValue);
//            sankyNode.setUrl(StringUtils.isBlank(urlValue) ? "" : urlValue);
        }
        else if ("rsearch_search".equals(url))
        {
            sankyNode.setUrl("rsearch_search");
        }
        else
        {
            sankyNode.setUrl("");
        }
        
        sankyNode.setType(type);
        sankyNode.setSnap(queryItemVO.getId());
        sankyNode.setNodeType(nodesRel[i] + "_s");
        return sankyNode;
    }

    private static void setUrl(CustomSankeyNode sankyNode, String urlValue)
    {
        if (StringUtils.isBlank(urlValue))
        {
            sankyNode.setUrl("");
        }
        else
        {
            sankyNode.setUrl(urlValue);
        }
    }
    
    /**
     * @param vo vo
     * @return map
     */
    public static Map<String, Object> getQueryItemValue(Object vo)
    {
        Map<String, Object> map = new HashMap<String, Object>();

        try
        {
            BeanInfo beanInfo = Introspector.getBeanInfo(vo.getClass());
            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();
            for (PropertyDescriptor property : propertyDescriptors)
            {
                String key = property.getName();
                if (key.compareToIgnoreCase("class") == 0)
                {
                    continue;
                }
                Method getter = property.getReadMethod();
                Object value = null;
                if (getter != null)
                {
                    value = getter.invoke(vo);
                }
                map.put(key, value);
            }
        }
        catch (IllegalAccessException e)
        {
            e.printStackTrace();
        }
        catch (IllegalArgumentException e)
        {
            e.printStackTrace();
        }
        catch (InvocationTargetException e)
        {
            e.printStackTrace();
        }
        catch (IntrospectionException e)
        {
            e.printStackTrace();
        }
        return map;
    }
    
    /**
     * @return String
     */
    public static String getUUIDSub()
    {
        return "-" + UUID.randomUUID().toString().replaceAll("-", "");
    }
    
    /**
     * @param blankLenth int
     * @return String
     */
    public static String getBlankStr(int blankLenth)
    {
        String str = "";
        if (blankLenth > 0)
        {
            StringBuffer blankSb = new StringBuffer();
            for (int i = 0; i < blankLenth; i++)
            {
                blankSb.append(" ");
            }
            str = blankSb.toString();
        }
        return str;
    }

    /**
     * @param res res
     * @return list
     */
    public static List<JSONObject> convertToAppCusKnowledge(QueryResultsVO res)
    {
        List<JSONObject> knowList = new ArrayList<JSONObject>();
        List<QueryItemVO> itemList = res.getData();
        if (Objects.nonNull(res) && !CollectionUtils.isEmpty(itemList))
        {
            for (QueryItemVO vo : itemList)
            {
                JSONObject json = new JSONObject();
                json.put("searchid", vo.getId());
                json.put("title", vo.getTitle());
                json.put("from", vo.getFrom());
                json.put("imgurl", vo.getSnapshot());
                json.put("rank", vo.getSimilarDocNum());
                json.put("url", vo.getSrc());
                knowList.add(json);
            }
        }
        Collections.sort(knowList, new Comparator<JSONObject>()
        {

            public int compare(JSONObject o1, JSONObject o2)
            {
                if (o1.getInteger("rank") > o2.getInteger("rank"))
                {
                    return 1;
                }
                return -1;
            }
        });
        return knowList;
    }

    /**
     * 根据配置合并多种查询的查询结果
     * 
     * @param allResult
     *            各种查询返回的结果
     * @return 合并后的结果
     */
    public static QueryResultsVO convertQueryMap(Map<String, QueryResultsVO> allResult)
    {
        QueryResultsVO response = null;
        String[] querySorts = {Constants.QUERY_COMMON };
        String querySort = IndexConfig.findSingleValueByKeyAndType(Constants.SOLR_SCORE_KEY_QUERY_SORT,
                Constants.SOLR_SCORE_TYPE_API_QUERY);
        if (StringUtils.isNotBlank(querySort))
        {
            querySorts = querySort.split(",");
        }
        for (String query : querySorts)
        {
            if (allResult.containsKey(query))
            {
                if (response == null)
                {
                    response = allResult.get(query);
                }
                else
                {
                    response.mergeResult(allResult.get(query));
                }
            }
        }
        return response;
    }

    /**
     * 修改api返回的url
     * 
     * @param collection
     *            collection
     * @param solrQueryConditionVO
     *            solrQueryConditionVO
     * @param request
     *            request
     * @param res
     *            res
     * @param type
     *            api类型
     */
    public static void buildApiUrl(String collection, QueryConditionVO solrQueryConditionVO, HttpServletRequest request,
            QueryResultsVO res, String type)
    {
        if (Objects.isNull(res))
        {
            return;
        }
        // 封装url
        int indexStart = (res.getCurrentPage() - 1) * res.getPageSize();
        final String from = Util.parseString(request.getParameter("from"));
        for (int i = 0; i < res.getData().size(); i++)
        {
            QueryItemVO item = res.getData().get(i);
            String itemSrc = Util.encodeUri(item.getSrc());
            String itemId = Util.encodeUri(item.getId());
            StringBuffer reqUrl = request.getRequestURL();
            String host = reqUrl.substring(0, reqUrl.indexOf("/api/"));
            item.setSrc(host + "/api/goUrl?id=" + itemId + "&user=" + Util.encodeUri(solrQueryConditionVO.getUser())
                    + "&key=" + Util.encodeUri(solrQueryConditionVO.getOrigKey()) + "&url=" + itemSrc + "&collection="
                    + collection + "&index=" + (indexStart + i + 1) + "&from=" + from + "&sourceFrom="
                    + item.getFromKey() + "&type=" + type);
            if (StringUtils.isNotBlank(item.getSnapshot()))
            {
                String snapshot = Util.encodeUri(item.getSnapshot());
                item.setSnapshot(
                        host + "/api/goUrl?id=" + itemId + "&user=" + Util.encodeUri(solrQueryConditionVO.getUser())
                                + "&key=" + Util.encodeUri(solrQueryConditionVO.getOrigKey()) + "&url=" + snapshot
                                + "&collection=" + collection + "&index=" + (indexStart + i + 1) + "&from=" + from
                                + "&sourceFrom=" + item.getFromKey() + "&type=" + type);
            }
        }
    }
    
    /**
     * 修改DocSimilarity api返回的url
     * 
     * @param collection
     *            collection
     * @param solrQueryConditionVO
     *            solrQueryConditionVO
     * @param request
     *            request
     * @param res
     *            res
     * @param type
     *            api类型
     */
    public static void buildDocApiUrl(String collection, QueryConditionVO solrQueryConditionVO,
            HttpServletRequest request, QueryResultsVO res, String type)
    {
        if (Objects.isNull(res))
        {
            return;
        }
        // 封装url
        int indexStart = (res.getCurrentPage() - 1) * res.getPageSize();
        final String from = Util.parseString(request.getParameter("from"));
        for (int i = 0; i < res.getDatas().size(); i++)
        {
            QueryDocSimilarityItemVO itemVo = res.getDatas().get(i);
            String itemSrc = Util.encodeUri(itemVo.getSrc());
            String itemId = Util.encodeUri(itemVo.getId());
            StringBuffer reqUrl = request.getRequestURL();
            String host = reqUrl.substring(0, reqUrl.indexOf("/api/"));
            itemVo.setSrc(host + "/api/goUrl?id=" + itemId + "&user=" + Util.encodeUri(solrQueryConditionVO.getUser())
                    + "&key=" + Util.encodeUri(solrQueryConditionVO.getOrigKey()) + "&url=" + itemSrc + "&collection="
                    + collection + "&index=" + (indexStart + i + 1) + "&from=" + from + "&sourceFrom="
                    + itemVo.getFromKey() + "&type=" + type);
            if (StringUtils.isNotBlank(itemVo.getSnapshot()))
            {
                String snapshot = Util.encodeUri(itemVo.getSnapshot());
                itemVo.setSnapshot(
                        host + "/api/goUrl?id=" + itemId + "&user=" + Util.encodeUri(solrQueryConditionVO.getUser())
                                + "&key=" + Util.encodeUri(solrQueryConditionVO.getOrigKey()) + "&url=" + snapshot
                                + "&collection=" + collection + "&index=" + (indexStart + i + 1) + "&from=" + from
                                + "&sourceFrom=" + itemVo.getFromKey() + "&type=" + type);
            }
        }
    }

    /**
     * 获取配置数据中共性问题查询显示数据最小分数
     * 
     * @return min score
     */
    public static double getMinScore()
    {
        double score = 0.0;
        try
        {
            String minScore = IndexConfig.findSingleValueByKeyAndType(Constants.MIN_SCORE,
                    Constants.API_TYPE_DOCSIMILARITY);
            if (StringUtils.isNotBlank(minScore))
            {
                score = Double.parseDouble(minScore);
            }
        }
        catch (Exception ex)
        {
            score = 0.0;
        }

        return score;
    }
}

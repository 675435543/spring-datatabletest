datatableModify.css
/* datatable 表格样式 */
div.datatableSearch {
	float: left;
    margin-right: 20px;
}

.datatableSearch .dataTables_filter label input {
	height: 32px;
	width: 180px;
	border: 1px solid #d6d6d6;
	color: #545454;
	font-size: 14px;
	padding: 6px 10px;
	line-height: 18px;
	margin-left: 0px;
}

.dataTables_wrapper .dataTables_info {
	float: left !important;
	clear: none !important;
	padding-top: 10px;
}

.dataTables_wrapper .dataTables_length label {
	margin-top: 10px;
	font-weight: normal;
}

a.dt-button {
/* 	color: #0097dd;
	outline: none;
	border: 1px solid #868f96;
	border-color: #0097dd;
	border-radius: 0px;
	padding: 0 20px;
	margin: 0 12px 10px 0 !important;
	height: 34px;
	width: auto;
	display: inline-block;
	line-height: 34px;
	text-decoration: none;
	text-align: center;
	font-size: 14px;
	font-style: normal;
	font-family: 'Arial Negreta', 'Arial Normal', 'Arial'; */
	display: inline-block;
    padding: 0px 15px;
    line-height: 32px;
    height: 32px;
    font-size: 14px;
    position: relative;
    color: #fff;
    background-color: #0097dd;
    outline: none;
    border: none;
    overflow: hidden;
    margin-right: 18px;
    margin-bottom: 20px;
}

.dt-button:hover {
	background: #149FDF;
	color: #FFFFFF;
}

.dt-buttons {
	float: left;
    margin-right: 15px;
}

.aresui-card table {
	width: 100%;
	border: none;
	border-collapse: collapse;
	border-spacing: 0px !important;
	display: table;
	table-layout: fixed;
}

table.dataTable th {
	background-color: #EEEEEE;
	font-family: 'Arial Normal', 'Arial';
	font-weight: 400;
	font-style: normal;
	font-size: 13px;
	color: #333333;
	text-align: left;
	border: 1px solid #D6D6D6;
	white-space: normal;
	word-break: break-all;
}

table.dataTable td {
	border: 1px solid #D6D6D6;
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
	word-break: break-all;
	font-size: 12px !important;
	height: 40px;
	line-height: normal;
	text-align: left;
	padding: 5px 10px;
}

table.dataTable tbody tr:hover td {
	line-height: normal;
	white-space: normal !important;
	text-overflow: clip;
	word-break: break-all;
}

table>tbody>tr:hover {
	background: #edebe8 !important;
}

table.dataTable.stripe tbody tr.odd, table.dataTable.display tbody tr.odd
	{
	background-color: #ffffff;
}

table.dataTable.stripe tbody tr.even, table.dataTable.display tbody tr.even
	{
	background-color: #ffffff;
}

table.dataTable.no-footer {
	border-bottom: 1px solid #D6D6D6;
}

table.dataTable.no-footer tr th {
	outline: none;
	border-right: 1px solid #ddd;
	border-bottom: 2px solid #fff;
	background-color: #ebebeb;
	font-size: 14px !important;
}

.dataTables_wrapper.no-footer .dataTables_scrollBody {
	border-bottom: 0px;
}

table.dataTable thead th,table.dataTable tbody td {
	border-bottom: 0px;
}

public class MailSenderInfo
{
    // 邮件发送者的地址    
    private String fromAddress;
    
    // 邮件接收者的地址    
    private String[] toAddress;
    
    // 邮件抄送者的地址    
    private String[] ccAddress;
    
    // 邮件秘密抄送者的地址    
    private String[] bccAddress;
    
    // 登陆邮件发送服务器的用户名和密码    
    private String userName;
    
    private String password;
    
    // 是否需要身份验证    
    private boolean validate = true;
    
    // 邮件主题    
    private String subject;
    
    // 邮件的文本内容    
    private String content;
    
    // 邮件附件的文件名    
    private String[] attachFileNames;
    
    public boolean isValidate()
    {
        return validate;
    }
    
    public void setValidate(boolean validate)
    {
        this.validate = validate;
    }
    
    public String[] getAttachFileNames()
    {
        return attachFileNames;
    }
    
    public void setAttachFileNames(String[] fileNames)
    {
        this.attachFileNames = fileNames;
    }
    
    public String getFromAddress()
    {
        return fromAddress;
    }
    
    public void setFromAddress(String fromAddress)
    {
        this.fromAddress = fromAddress;
    }
    
    public String getPassword()
    {
        return password;
    }
    
    public void setPassword(String password)
    {
        this.password = password;
    }
    
    public String[] getToAddress()
    {
        return toAddress;
    }
    
    public void setToAddress(String[] toAddress)
    {
        this.toAddress = toAddress;
    }
    
    public String[] getCcAddress()
    {
        return ccAddress;
    }
    
    public void setCcAddress(String[] ccAddress)
    {
        this.ccAddress = ccAddress;
    }
    
    public String[] getBccAddress()
    {
        return bccAddress;
    }
    
    public void setBccAddress(String[] bccAddress)
    {
        this.bccAddress = bccAddress;
    }
    
    public String getUserName()
    {
        return userName;
    }
    
    public void setUserName(String userName)
    {
        this.userName = userName;
    }
    
    public String getSubject()
    {
        return subject;
    }
    
    public void setSubject(String subject)
    {
        this.subject = subject;
    }
    
    public String getContent()
    {
        return content;
    }
    
    public void setContent(String textContent)
    {
        this.content = textContent;
    }
}

import javax.mail.Authenticator;
import javax.mail.PasswordAuthentication;
public class MyAuthenticator extends Authenticator
{
    String userName = null;
    
    String password = null;
    
    /**
     *  MyAuthenticator 无参构造方法
     */
    public MyAuthenticator()
    {
    }
    
    /**
     *  MyAuthenticator 有参构造方法
     * @param username username
     * @param password password
     */
    public MyAuthenticator(String username, String password)
    {
        this.userName = username;
        this.password = password;
    }
    
    protected PasswordAuthentication getPasswordAuthentication()
    {
        return new PasswordAuthentication(userName, password);
    }
}

import java.util.Date;
import java.util.Properties;
import javax.mail.Address;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class SimpleMailSender
{
    private static final Logger LOGGER = LoggerFactory.getLogger(SimpleMailSender.class);
    
    /**   
    * 以文本格式发送邮件   
    * @param mailInfo mailInfo
    * @param authenName authenName
    * @param authenPwd authenPwd 
    * @param senderEmail senderEmail  
    * @return boolean boolean
    */
    public static boolean sendTextMail(MailSenderInfo mailInfo, String authenName, String authenPwd, String senderEmail)
    {
		final String username = PropertiesUtils.getConfig(CommonsConstants.USER_NAME);
		final String password = PropertiesUtils.getConfig(CommonsConstants.PASSWORD);

		Properties props = new Properties();
		props.put("mail.smtp.auth", "true");
		props.put("mail.smtp.host", PropertiesUtils.getConfig(CommonsConstants.HOST));
		props.put("mail.smtp.port", PropertiesUtils.getConfig(CommonsConstants.PORT));

		Session session = Session.getInstance(props,
				new javax.mail.Authenticator() {
					protected PasswordAuthentication getPasswordAuthentication() {
						return new PasswordAuthentication(username, password);
				}
		});
        try
        {
            // 根据session创建一个邮件消息    
            Message mailMessage = new MimeMessage(session);
            // 创建邮件发送者地址    
            Address from = new InternetAddress(senderEmail);
            // 设置邮件消息的发送者    
            mailMessage.setFrom(from);
            // 创建邮件的接收者地址，并设置到邮件消息中    
            InternetAddress[] sendTo = new InternetAddress[mailInfo.getToAddress().length];
            for (int i = 0; i < mailInfo.getToAddress().length; i++)
            {
                sendTo[i] = new InternetAddress(mailInfo.getToAddress()[i]);
            }
            mailMessage.setRecipients(Message.RecipientType.TO, sendTo);
            
            // 创建邮件的抄送者地址，并设置到邮件消息中    
            if (mailInfo.getCcAddress() != null)
            {
                InternetAddress[] sendCc = new InternetAddress[mailInfo.getCcAddress().length];
                for (int i = 0; i < mailInfo.getCcAddress().length; i++)
                {
                    sendCc[i] = new InternetAddress(mailInfo.getCcAddress()[i]);
                }
                mailMessage.setRecipients(Message.RecipientType.CC, sendCc);
            }
            // 设置邮件消息的主题    
            mailMessage.setSubject(mailInfo.getSubject());
            // 设置邮件消息发送的时间    
            mailMessage.setSentDate(new Date());
            // 设置邮件消息的主要内容    
            String mailContent = mailInfo.getContent();
            mailMessage.setText(mailContent);
            // 发送邮件    
            Transport.send(mailMessage);
            return true;
        }
        catch (MessagingException ex)
        {
            LOGGER.error(ex.toString(), ex);
            return false;
        }
    }
    

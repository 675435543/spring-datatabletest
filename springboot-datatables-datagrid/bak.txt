http://www.cnblogs.com/hooray/archive/2012/09/05/2672133.html
https://www.cnblogs.com/sz-zzm/p/5218696.html
	
java 项目日志管理设计方案
https://blog.csdn.net/jlh912008548/article/details/72782241

springboot整合Quartz实现动态配置定时任务,不用了
https://blog.csdn.net/liuchuanhong1/article/details/60873295

Spring Boot配置定时任务（实例）
https://blog.csdn.net/m0_37885618/article/details/77196691

联想功能添加div

自动化测试工具
https://blog.csdn.net/jlh912008548/article/details/72782241

无注解的官方样例
https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples

小马哥的lesson
https://github.com/mercyblitz/segmentfault-lessons

1，枚举定义的高级方法
SearchType.java
public enum SearchType
{
    GLOBAL_SEARCH("search", "normalCommonSearch", "全局搜索"),
    SIMILAR_SEARCH("similar", "normalSimilarSearch", "相似文章"),
    RECOMMEND_SEARCH("recommend_search", "normalRecommendSearch", "推荐搜索"),
    API_SUGGEST("api_suggest", "apiSuggestSearch", "api联想搜索"),
    API_PLUGIN("api_plugin", "apiPluginSearch", "插件查询接口"),
    API_DOC_SUGGEST("api_doc_suggest", "apiDocSuggest", "文档联想搜索"),
    API_ALL_SEARCH("api_all_search", "apiAllSearch", "api_all_search"),
    HOTQUERY_SEARCH("hotquery", "normalHoteQuerySearch", "热搜"),
    APP_VIEW("app_view", "appViewSearch", "app_view"),
    APP_FACET("app_facet", "appFacetSearch", "app_facet"),
    APP_COMMON("app_common", "appCommonSearch", "查询app相关信息"),
    OFFICIAL_SEARCH("official","normalOfficialSearch", "官方搜索"),
    NORMAL_CACHE("normal_cache", "normalCacheSearch", "搜索缓存"),
    NORMAL_FACET("normal_facet", "normalFacetSearch", "normal_facet"),
    NORMAL_EXPERT("normal_expert", "normalExpertSearch", "专家推荐"),
    API_WHOLE("api_whole", "apiWholeSearch", "api_whole"),
    API_RECOMMEND("api_recommend", "apiRecommendSearch", "api_recommend");

    private String value;

    private String beanId;

    private String desc;

    private SearchType(String value, String beanId, String desc)
    {
        this.value = value;
        this.beanId = beanId;
        this.desc = desc;
    }

    public String getValue()
    {
        return value;
    }

    public void setValue(String value)
    {
        this.value = value;
    }

    public String getDesc()
    {
        return desc;
    }

    public void setDesc(String desc)
    {
        this.desc = desc;
    }

    public String getBeanId()
    {
        return beanId;
    }

    public void setBeanId(String beanId)
    {
        this.beanId = beanId;
    }

    public static SearchType find(String value)
    {
        for (SearchType type : SearchType.values())
        {
            if (type.value.equals(value))
            {
                return type;
            }
        }
        return null;
    }

}

ExternalTypeToSearchType.java
public enum ExternalTypeToSearchType
{
    BODY("body",Constants.QUERY_COMMON,SearchType.GLOBAL_SEARCH),
    WHOLEQUERY("wholeQuery",Constants.QUERY_WHOLE,SearchType.API_WHOLE),
    OFFICIAL("official",Constants.QUERY_OFFICIAL,SearchType.OFFICIAL_SEARCH),
    RECOMMEND("recommend",Constants.QUERY_RECOMMEND,SearchType.API_RECOMMEND),
    HOTQUERY("hotQuery",Constants.QUERY_HOT,SearchType.HOTQUERY_SEARCH);
    
    private String type;

    private String querySortValue;
    
    private SearchType searchType ;

    private ExternalTypeToSearchType(String type, String querySortValue, SearchType searchType)
    {
        this.type = type;
        this.querySortValue = querySortValue;
        this.searchType = searchType;
    }

    public String getType()
    {
        return type;
    }

    public void setType(String type)
    {
        this.type = type;
    }

    public String getQuerySortValue()
    {
        return querySortValue;
    }

    public void setQuerySortValue(String querySortValue)
    {
        this.querySortValue = querySortValue;
    }

    public SearchType getSearchType()
    {
        return searchType;
    }

    public void setSearchType(SearchType searchType)
    {
        this.searchType = searchType;
    }

    public static SearchType findSearchType(String type)
    {
        for (ExternalTypeToSearchType externalTypeToSearchType : ExternalTypeToSearchType.values())
        {
            if (externalTypeToSearchType.type.equals(type))
            {
                return externalTypeToSearchType.searchType;
            }
        }
        return null;
    }
    
    public static String findQuerySortValue(String type)
    {
        for (ExternalTypeToSearchType externalTypeToSearchType : ExternalTypeToSearchType.values())
        {
            if (externalTypeToSearchType.type.equals(type))
            {
                return externalTypeToSearchType.querySortValue;
            }
        }
        return null;
    }

}

2，git操作
Git日常三板斧- 分支操作
查看本地分支 git branch
查看所有分支(本地以及远程) git branch –a 
创建并切换分支：git checkout –b xxx origin/xxx
切换分支：git checkout xxx

Git日常三板斧-代码提交
添加索引：git add 
提交本地仓库：git commit –m ‘功能描述’
更新代码：git pull origin xxxx 
上一步如有冲突，解决完冲突后从第一步执行一遍，直至没有冲突
推送至远程仓库： git push origin xxxx 

Git日常三板斧-代码暂存
暂存代码：git stash
取出代码：git stash pop/apply  stash{0} 
查看暂存代码：git stash show stash{0}
查看暂存list：git stash list

git 开发流程

